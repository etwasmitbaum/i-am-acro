
/// State variable conataining all acronyms.
/// TODO: Describe stucture
/// -> dictionary
#let _acronyms = state("_acronyms", none)

/// State variable, what the default language is to be used with acronyms. This is context aware. Exmaple: "en", "de", "fr" -> string
#let _default-lang = state("_default-lang", none)

/// State variable, if links should be generated by default. Only the final value will be used. -> bool
#let _always-link = state("_always-link", true)

/// Prefix of label keys. Used to link acronyms to the printed acronym list. -> string
#let LABEL_KEY = "acronymlinks-"

// Maybe change typst language when printing different language


// TODO create command to display custom form of acronym -> function with custom long and short form but store the usage correctly. So you can display a acronym for the first time (with custom ending for exmaple) and it is remembered as already shown

/// Initialize the acronyms and the default settings.
/// -> none
#let init-acronyms(
  /// Dictionary containing all the defined acronyms.
  /// TODO describe structure
  /// -> dictionary
  acronyms,
  /// Set the default language. For exmaple "en", "de", "fr". You can change this later using @update-acro-lang -> string
  default-lang,
  /// Controls if labels and links will be generated. The label will point to @print-acronyms, the link will be created on the displayed acronym.
  always-link: true,
) = {
  _default-lang.update(default-lang)
  _always-link.update(always-link)

  let data = (:)
  for (key, value) in acronyms {
    // map key to its value (lang and short/long; used; long-shown)
    data.insert(key, (value: value, used: false, long-shown: false))
  }

  _acronyms.update(data)
}

/// Update the current default language used for acronyms. Useful when writing a bilingual document. -> none
#let update-acro-lang(
  /// Language to be displayed. Examples: "en", "de", "fr" -> string | none
  lang,
) = {
  _default-lang.update(lang)
}

/// Display text with a link, when desired.
/// The link will use @LABEL_KEY with the key paramter to generate the label.
/// The label will all point to the acronyms in @print-acronyms.
/// -> content
#let display-text(
  // TODO maybe rename function
  /// Text to be printed -> content | string
  text,
  /// Key used for label generation with @LABEL_KEY. Only required when "do-link" is true. -> string
  key: none,
  /// Generate a link to the printed aconyms from @print-acronyms. -> bool
  do-link: false,
) = {
  if do-link {
    link(label(LABEL_KEY + key), text)
  } else {
    text
  }
}

/// Update the status of "used" for a acronym from @_acronyms. -> none
#let update-acronym-used(
  /// Key of the acronym, which will be updated. -> string
  key,
  /// New value for the "used" key of the selected acronym. -> bool
  used,
) = {
  _acronyms.update(data => {
    data.at(key).used = used
    data
  })
}

/// Update the status of "long-shown" for a acronym from @_acronyms. -> none
#let update-acronym-long-shown(
  /// Key of the acronym, which will be updated. -> string
  key,
  /// New value for the "long-shown" key of the selected acronym. -> bool
  long-shown,
) = {
  _acronyms.update(data => {
    data.at(key).long-shown = long-shown
    data
  })
}

/// Show the acronym. If it is first shown, the long version with the short will be displayed.
///
/// -> content
#let ac(
  /// Key of the desired acronym -> string
  key,
  /// Language to be displayed. none will use the default language -> string | none
  lang: none,
) = {
  context {
    let selected-lang = if lang == none { _default-lang.get() } else { lang }
    let selected-acro = _acronyms.get().at(key)
    let text

    // Singular
    if selected-acro.long-shown {
      text = selected-acro.value.at(selected-lang).short
    } else {
      // Long was not shown before
      text = [#selected-acro.value.at(selected-lang).long~(#selected-acro.value.at(selected-lang).short)]
      update-acronym-long-shown(key, true)
    }

    update-acronym-used(key, true)
    display-text(text, key: key, do-link: _always-link.final())
  }
}

/// Display the plural form an acronym. If it is first shown, the long version with the short will be displayed. Also if no plural form was defined, "s" will be appended.
/// -> content
#let acp(
  /// Key of the desired acronym -> string
  key,
  /// Language to be displayed. none will use the default language -> string | none
  lang: none,
) = {
  context {
    let selected-lang = if lang == none { _default-lang.get() } else { lang }
    let selected-acro = _acronyms.get().at(key)

    // First get the short-pl form, append "s" if none was defined.
    // Do this first, since it is needed either way
    let short-pl-text = if "short-pl" in selected-acro.value.at(selected-lang) {
      selected-acro.value.at(selected-lang).short-pl
    } else {
      // short-pl was not defined
      selected-acro.value.at(selected-lang).short + "s"
    }

    let text

    if selected-acro.long-shown {
      text = short-pl-text
    } else {
      let long-pl-text = if "long-pl" in selected-acro.value.at(selected-lang) {
        selected-acro.value.at(selected-lang).long-pl
      } else {
        // short-pl was not defined
        selected-acro.value.at(selected-lang).long + "s"
      }
      text = [#long-pl-text~(#short-pl-text)]
      update-acronym-long-shown(key, true)
    }

    update-acronym-used(key, true)
    display-text(text, key: key, do-link: _always-link.final())
  }
}

/// Show the acronym in the short form.
///
/// -> content
#let acs(
  /// Key of the desired acronym -> string
  key,
  /// Language to be displayed. none will use the default language -> string | none
  lang: none,
) = {
  context {
    let selected-lang = if lang == none { _default-lang.get() } else { lang }
    let selected-acro = _acronyms.get().at(key)
    let text = selected-acro.value.at(selected-lang).short

    update-acronym-used(key, true)
    display-text(text, key: key, do-link: _always-link.final())
  }
}

/// Show the acronym in the short plural form. If no short plural form was defined, "s" will be appended.
///
/// -> content
#let acsp(
  /// Key of the desired acronym -> string
  key,
  /// Language to be displayed. none will use the default language -> string | none
  lang: none,
) = {
  context {
    let selected-lang = if lang == none { _default-lang.get() } else { lang }
    let selected-acro = _acronyms.get().at(key)
    let text

    if "short-pl" in selected-acro.value.at(selected-lang) {
      text = selected-acro.value.at(selected-lang).short-pl
    } else {
      // short-pl was not defined
      text = selected-acro.value.at(selected-lang).short + "s"
    }

    update-acronym-used(key, true)
    display-text(text, key: key, do-link: _always-link.final())
  }
}

/// Display the long form of an acronym. This will not set "long-shown" or "used" to true (since the short version is not displayed with it)
/// -> content
#let acl(
  /// Key of the desired acronym -> string
  key,
  /// Language to be displayed. none will use the default language -> string | none
  lang: none,
) = {
  context {
    let selected-lang = if lang == none { _default-lang.get() } else { lang }
    let selected-acro = _acronyms.get().at(key)
    let text = selected-acro.value.at(selected-lang).long

    display-text(text, key: key, do-link: _always-link.final())
  }
}

/// Display the long plural form of an acronym. If no plural form was defined, "s" will be appended. This will not set "long-shown" to true (since the short version is not displayed with it)
/// -> content
#let aclp(
  /// Key of the desired acronym -> string
  key,
  /// Language to be displayed. none will use the default language -> string | none
  lang: none,
) = {
  context {
    let selected-lang = if lang == none { _default-lang.get() } else { lang }
    let selected-acro = _acronyms.get().at(key)
    let text

    if "long-pl" in selected-acro.value.at(selected-lang) {
      text = selected-acro.value.at(selected-lang).long-pl
    } else {
      text = selected-acro.value.at(selected-lang).long + "s"
    }

    display-text(text, key: key, do-link: _always-link.final())
  }
}

/// Display an acronym with a suffix, hyphenated to it (e.g., acronym-suffix).
/// -> content
#let ac-suffix(
  /// Key of the desired acronym -> string
  key,
  /// Suffix whick whill be displayed after the acronym. -> string | content
  suffix,
  /// Language to be displayed. none will use the default language -> string | none
  lang: none,
  /// Show the plural form of the acrony. An "s" will be appended if the plural form ist not defined. -> bool
  plural: false,
) = {
  context {
    let selected-lang = if lang == none { _default-lang.get() } else { lang }
    let selected-acro = _acronyms.get().at(key)

    let short-word
    let long-word
    let text

    if plural {
      short-word = if "short-pl" in selected-acro.value.at(selected-lang) {
        selected-acro.value.at(selected-lang).short-pl
      } else { selected-acro.value.at(selected-lang).short + "s"}
      long-word = if "long-pl" in selected-acro.value.at(selected-lang) {
        selected-acro.value.at(selected-lang).long-pl
      } else { selected-acro.value.at(selected-lang).long + "s"}
    } else {
      // singular
      short-word = selected-acro.value.at(selected-lang).short
      long-word = selected-acro.value.at(selected-lang).long
    }

    if selected-acro.long-shown {
      text = [#(short-word)-#suffix]
    } else {
      text = [#(long-word)\(#short-word)-#suffix]
      update-acronym-long-shown(key, true)
    }

    update-acronym-used(key, true)
    display-text(text, key: key, do-link: _always-link.final())
  }
}

/// Print acronyms
/// -> content
#let print-acronyms(create-labels: true) = {
  context {
    let final-acronyms = _acronyms.final()
    let printable-acronyms = (:)
    let default-lang-final = _default-lang.get()

    for (key, (value, used, long-shown)) in final-acronyms {
      if used {
        // extract only used acronyms with their default-lang short and long form
        let short-long = (value.at(default-lang-final).short, value.at(default-lang-final).long)
        printable-acronyms.insert(str(key), short-long)
      }
    }

    // TODO Sort the acronyms

    grid(
      columns: (1fr, 1fr),
      fill: (green, blue),
      ..{
        for (key, value) in printable-acronyms {
          (
            [#value.at(0) #if create-labels { label(LABEL_KEY + key) }],
            [#value.at(1)],
          )
        }
      },
    )
  }
}
